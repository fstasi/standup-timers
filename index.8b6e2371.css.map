{"mappings":"ACGA,kJAOA,iLAQA,uLAQA,gLAUI,kEAIA,kJAUA,uCAIA,6GC8GF,yJAAA","sources":["index.8b6e2371.css","src/index.scss","node_modules/arduino-sass/src/_fonts.scss"],"sourcesContent":[":root {\n  --main-bg-color: #ecf1f1;\n  --timer-border-color: #00979d;\n  --timer-outline-color: #a5f2ee;\n  --timer-text-color: #005c5f;\n  --timer-elapsed-color: #7fcbcd;\n}\n\n.sinthwave {\n  --main-bg-color: #3c345c;\n  --main-text-color: #b8aec8;\n  --timer-border-color: #5da4a6;\n  --timer-outline-color: #5da4a6;\n  --timer-text-color: #d30cb8;\n  --timer-elapsed-color: #6df1d8;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n  color: var(--main-text-color);\n  padding: 0 20px;\n  font-family: Open Sans, Lucida Grande, Lucida, Verdana, sans-serif;\n  font-style: normal;\n  font-weight: 600;\n}\n\n.timer {\n  border: 1px solid var(--timer-border-color);\n  height: 40px;\n  cursor: pointer;\n  color: var(--timer-text-color);\n  border-radius: 4px;\n  margin-bottom: 15px;\n  display: block;\n  position: relative;\n}\n\n.timer--active {\n  box-shadow: var(--timer-outline-color) 0px 0px 0 3px;\n}\n\n.timer__text {\n  text-transform: capitalize;\n  justify-content: space-between;\n  padding: 10px;\n  font-weight: 600;\n  line-height: 20px;\n  display: flex;\n  position: relative;\n}\n\n.timer__time {\n  text-transform: capitalize;\n}\n\n.timer__elapsed {\n  background-color: var(--timer-elapsed-color);\n  width: 0%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-weight: 400;\n  src: url(\"https://content.arduino.cc/fonts/OpenSans-Regular-webfont.woff\") format(\"woff\");\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-weight: 600;\n  src: url(\"https://content.arduino.cc/fonts/OpenSans-Semibold-webfont.woff\") format(\"woff\");\n}\n\n/*# sourceMappingURL=index.8b6e2371.css.map */\n","@import '~arduino-sass/src/fonts';\n@import '~arduino-sass/src/variables';\n\n:root {\n    --main-bg-color: #{$clouds};\n    --timer-border-color: #{$teal2};\n    --timer-outline-color: #{$teal7};\n    --timer-text-color: #{$teal5};\n    --timer-elapsed-color: #{$teal0};\n}\n.sinthwave {\n    --main-bg-color: #3c345c;\n    --main-text-color: #b8aec8;\n    --timer-border-color: #5da4a6;\n    --timer-outline-color: #5da4a6;\n    --timer-text-color: #d30cb8;\n    --timer-elapsed-color: #6df1d8;\n}\nbody {\n    background-color: var(--main-bg-color);\n    @include font(opensans);\n    @include font(opensans, semi-bold);\n    padding: 0 20px;\n    color: var(--main-text-color);\n}\n\n.timer {\n    display: block;\n    border: 1px solid var(--timer-border-color);\n    margin-bottom: 15px;\n    position: relative;\n    border-radius: 4px;\n    height: 40px;\n    cursor: pointer;\n    color: var(--timer-text-color);\n\n    &--active {\n        box-shadow: var(--timer-outline-color) 0px 0px 0 3px;\n    }\n    \n    &__text {\n        position: relative;\n        padding: 10px;\n        line-height: 20px;\n        text-transform: capitalize;\n        display: flex;\n        justify-content: space-between;\n        font-weight: 600;\n    }\n\n    &__time {\n        text-transform: capitalize;\n    }\n\n    &__elapsed {\n        position: absolute;\n        background-color: var(--timer-elapsed-color);\n        top: 0;\n        bottom: 0;\n        left: 0;\n        width: 0%;\n    }\n}\n\n@include import-fonts;","// * Copyright 2020 ARDUINO AG (http://www.arduino.cc/)\n// * This file is part of arduino-sass.\n// * Copyright (c) 2020\n// * Authors: Sebastian Hunkeler\n// *\n// * This software is released under:\n// * The GNU General Public License, which covers the main part of\n// * arduino-sass\n// * The terms of this license can be found at:\n// * https://www.gnu.org/licenses/gpl-3.0.en.html\n// *\n// * You can be released from the requirements of the above licenses by purchasing\n// * a commercial license. Buying such a license is mandatory if you want to modify or\n// * otherwise use the software for commercial activities involving the Arduino\n// * software without disclosing the source code of your own applications. To purchase\n// * a commercial license, send an email to license@arduino.cc.\n\n// stylelint-disable value-list-max-empty-lines\n\n$font-weight-light: 300;\n$font-weight-normal: 400;\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-bold: 700;\n$base-url: 'https://content.arduino.cc/';\n$font-path: 'fonts/';\n$used-fonts: ();\n\n/// Fetch nested keys\n///\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Keys to fetch\n/// @return {*}\n@function map-deep-get($map, $keys...) {\n  @each $key in $keys {\n    @if type-of($map) != 'map' {\n      @warn '`#{$map}` is not a map.';\n\n      @return false;\n    }\n    $map: map-get($map, $key);\n  }\n\n  @return $map;\n}\n\n/// Checks if a list contains a value(s).\n///\n/// @param {List} $list - The list to check against.\n/// @param {List} $values - A single value or list of values to check for.\n/// @example\n///   contains($list, $value)\n/// @return {Bool}\n@function contains($list, $values...) {\n  @each $value in $values {\n    @if type-of(index($list, $value)) != 'number' {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n/// Returns URL to a font based on its path\n///\n/// @param {String} $path - font path\n/// @param {String} $base [$base-url] - base URL\n/// @return {Url}\n/// @require $base-url\n@function font($path, $base: $base-url) {\n  @return url($base + $font-path + $path);\n}\n\n/// Font mixin that allows to include font styls from a pre-defined font stack.\n///\n/// @param {String} $group - The font group to use\n/// @param {String} $variant - The font variant / style to use\n/// @param {Map} $properties - The properties that shall be rendered into the selector\n/// @param {Map} $font-stack (optional) - The font stack to be used as source\n/// @example\n/// h1 { @include font(helvetica, bold); }\n/// h1 .caption { @include font(helvetica, light-italic, weight style); }\n///\n/// @requires {function} font-properties\n@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {\n  $font-properties: map-deep-get($font-stack, $group, $variant);\n\n  @if $font-properties == null or $font-properties == false {\n    @error 'Sorry, couldn\\'t find variant `#{$variant}` for `#{$group}`.';\n  }\n\n  @if $font-properties {\n    @include track-fonts($group, $variant);\n\n    @each $key, $value in $font-properties {\n      @if contains($properties, $key) {\n        font-#{$key}: $value;\n      }\n    }\n  }\n}\n\n/// Track all fonts and variations used in the stylesheet\n/// Check if this combination already exists in the map.\n/// If not, we add it to the map.\n///\n/// @param {String} $group\n/// @param {String} $variant\n/// @requires {Map} used-fonts\n@mixin track-fonts($group, $variant) {\n  // First check if we already knew this one:\n  @if map-has-key($used-fonts, $group) == false {\n    // Font-family isn't in the map yet, so add it.\n    // The key for the nested map is the font name:\n    $used-fonts: map-merge($used-fonts, ($group: ())) !global;\n  }\n\n  // Now check if the variation is known\n  $font-map: map-get($used-fonts, $group);\n\n  @if index($font-map, $variant) == null {\n    // Variation isn't in the map yet, so add it:\n    $variations: append($font-map, $variant);\n    $used-fonts: map-merge($used-fonts, ($group: $variations)) !global;\n  }\n}\n\n/// Add the font-face rules for all used fonts\n/// @return {String} font-face rules\n/// @requires {function} map-deep-get\n/// @requires {function} font-face\n@mixin import-fonts($font-stack: $base-font-stack) {\n  @each $group, $variations in $used-fonts {\n    @each $variant in $variations {\n      $font-properties: map-deep-get($font-stack, $group, $variant);\n\n      @if $font-properties {\n        // If we have a font-face key we create the font-face rule\n        $font-face: map-get($font-properties, font-face);\n\n        @if $font-face {\n          $font-family: map-get($font-face, family);\n          $file-path: map-get($font-face, path);\n          $file-formats: map-get($font-face, formats);\n          $font-weight: map-get($font-properties, weight);\n          $font-style: map-get($font-properties, style);\n\n          @if $file-formats {\n            @include render-font-face($font-family, $file-path, $font-weight, $font-style, $file-formats);\n          }\n\n          @else {\n            @include render-font-face($font-family, $file-path, $font-weight, $font-style);\n          }\n        }\n      }\n    }\n  }\n}\n\n/// Add a font-face rule\n/// @return {String} font-face rule\n/// @requires {function} font-source-declaration\n@mixin render-font-face($font-family, $file-path, $font-weight: 400, $font-style: normal, $file-formats: eot woff2 woff ttf svg) {\n  @font-face {\n    font-family: $font-family;\n    font-style: $font-style;\n    font-weight: $font-weight;\n    src: font-source-declaration($font-family, $file-path, $file-formats);\n  }\n}\n\n/// Used for creating the source string for fonts using @font-face\n/// Reference: http://goo.gl/Ru1bKP\n/// @requires {function} font\n@function font-source-declaration($font-family, $file-path, $file-formats) {\n  $src: ();\n\n  $formats-map: (\n    eot:   '#{$file-path}.eot?#iefix' format('embedded-opentype'),\n    woff2: '#{$file-path}.woff2' format('woff2'),\n    woff:  '#{$file-path}.woff' format('woff'),\n    ttf:   '#{$file-path}.ttf' format('truetype'),\n    svg:   '#{$file-path}.svg##{$font-family}' format('svg')\n  );\n\n  @each $key, $values in $formats-map {\n    @if contains($file-formats, $key) {\n      $file-path: nth($values, 1);\n      $font-format: nth($values, 2);\n      $src: append($src, font($file-path) $font-format, comma);\n    }\n  }\n\n  @return $src;\n}\n\n// Open Sans and Roboto font family\n$base-font-stack: (\n  // Sans-serif\n  opensans: (\n    light: (\n      family: ('Open Sans', 'Lucida Grande', Lucida, Verdana, sans-serif),\n      weight: $font-weight-light,\n      style: normal,\n      font-face: (\n        family: 'Open Sans',\n        path: 'OpenSans-Light-webfont',\n        formats: (woff)\n      )\n    ),\n    regular: (\n      family: ('Open Sans', 'Lucida Grande', Lucida, Verdana, sans-serif),\n      weight: $font-weight-normal,\n      style: normal,\n      font-face: (\n        family: 'Open Sans',\n        path: 'OpenSans-Regular-webfont',\n        formats: (woff)\n      )\n    ),\n    regular-italic: (\n      family: ('Open Sans', 'Lucida Grande', Lucida, Verdana, sans-serif),\n      weight: $font-weight-normal,\n      style: italic,\n      font-face: (\n        family: 'Open Sans',\n        path: 'OpenSans-Italic-webfont',\n        formats: (woff)\n      )\n    ),\n    semi-bold: (\n      family: ('Open Sans', 'Lucida Grande', Lucida, Verdana, sans-serif),\n      weight: $font-weight-semibold,\n      style: normal,\n      font-face: (\n        family: 'Open Sans',\n        path: 'OpenSans-Semibold-webfont',\n        formats: (woff)\n      )\n    ),\n    bold: (\n      family: ('Open Sans', 'Lucida Grande', Lucida, Verdana, sans-serif),\n      weight: $font-weight-bold,\n      style: normal,\n      font-face: (\n        family: 'Open Sans',\n        path: 'OpenSans-Bold-webfont',\n        formats: (woff)\n      )\n    )\n  ),\n\n  // Mono Space\n  roboto-mono: (\n    regular: (\n      family: ('Roboto Mono', 'monospace', 'Courier New', 'Lucida Console'),\n      weight: $font-weight-normal,\n      style: normal,\n      font-face: (\n        family: 'Roboto Mono',\n        path: 'Roboto-Mono-Regular-webfont',\n        formats: (woff)\n      )\n    ),\n    medium: (\n      family: ('Roboto Mono', 'monospace', 'Courier New', 'Lucida Console'),\n      weight: $font-weight-medium,\n      style: normal,\n      font-face: (\n        family: 'Roboto Mono',\n        path: 'Roboto-Mono-Medium-webfont',\n        formats: (woff)\n      )\n    ),\n    bold: (\n      family: ('Roboto Mono', 'monospace', 'Courier New', 'Lucida Console'),\n      weight: $font-weight-bold,\n      style: normal,\n      font-face: (\n        family: 'Roboto Mono',\n        path: 'Roboto-Mono-Bold-webfont',\n        formats: (woff)\n      )\n    )\n  )\n);\n"],"names":[],"version":3,"file":"index.8b6e2371.css.map"}